{"version":3,"file":"static/js/464.00404a0f.chunk.js","mappings":"0KACA,GAAgB,SAAW,yBAAyB,YAAc,6B,SCWlE,EATe,SAACA,GACd,OACE,gBAAKC,UAAWC,EAAAA,OAAhB,UACE,gBAAKD,UAAWC,EAAAA,SAAhB,SAA8BF,EAAMG,QAGzC,ECRD,GAAgB,iBAAmB,mCAAmC,MAAQ,wBAAwB,MAAQ,wBAAwB,UAAY,6B,mBCAlJ,GAAgB,UAAY,6BAA6B,KAAO,wBAAwB,KAAO,wBAAwB,MAAQ,yBAAyB,MAAQ,yBAAyB,MAAQ,0B,UCmB3LC,EAAsBC,EAAAA,KAAaC,MAAM,CAC9CC,UAAWF,EAAAA,KACTG,IAAI,EAAG,YACPC,IAAI,GAAI,oCACRC,SAAS,MAGNC,EAAgB,WAErB,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OACC,0BACC,SAAC,KAAD,CACCC,cAAe,CAAEP,UAAW,IAC5BQ,iBAAkBX,EAClBY,SAAU,SAACC,IATS,SAACV,GACvBK,GAASM,EAAAA,EAAAA,IAA2BX,GACpC,CAQGY,CAAeF,EAAOV,UACtB,EALF,SAOE,gBAAGa,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACA,UAAC,KAAD,YACC,SAAC,KAAD,CACCpB,UACCmB,EAAOb,WAAac,EAAQd,UAAYe,EAAAA,WAAWC,EAEpDC,KAAK,WACLrB,KAAK,cAELiB,EAAOb,WAAac,EAAQd,WAC5B,iBAAKN,UAAWqB,EAAAA,MAAhB,cAA4BF,EAAOb,kBAChCgB,GACJ,mBAAQtB,UAAWqB,EAAAA,MAAUE,KAAK,SAAlC,oBAZD,KAoBJ,EAED,EA1DkB,WACjB,IAAIC,GAAWC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,SAASC,SAA1B,IAE3B,OACC,iBAAK5B,UAAWqB,EAAAA,UAAhB,WACC,gBAAKrB,UAAWqB,EAAAA,UAAhB,UACC,gBAAKrB,UAAWqB,EAAAA,KAAhB,SAA0BG,OAE3B,SAACd,EAAD,MAGF,ECjBD,GAAgB,YAAc,mCCW9B,EAToB,SAACX,GACnB,OACE,gBAAKC,UAAW6B,EAAAA,QAAhB,UACE,gBAAK7B,UAAW6B,EAAAA,YAAhB,SAAgC9B,EAAM+B,WAG3C,ECsBD,EAvBiB,WACd,IAAIC,GAAQN,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAEA,EAAMC,SAASK,WAAjB,IACzBL,GAAWF,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAEA,EAAMC,SAASM,eAAjB,KACtBR,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAEA,EAAMQ,KAAKC,MAAb,KAC7BC,EAAAA,EAAAA,YAAU,WAET,IAEC,IAAIC,EAAON,EAAMO,KAAI,SAAAC,GAAC,OAAE,SAAC,EAAD,CAAgBrC,KAAMqC,EAAErC,KAAMsC,GAAID,EAAEC,IAAvBD,EAAf,IAClBT,EAAUH,EAASW,KAAI,SAAAC,GAAC,OAAE,SAAC,EAAD,CAAqBT,QAASS,EAAET,QAASU,GAAID,EAAEC,IAA7BD,EAApB,IAE7B,OACE,iBAAKvC,UAAW6B,EAAAA,SAAhB,WACC,gBAAK7B,UAAW6B,EAAAA,MAAhB,uBACC,iBAAK7B,UAAW6B,EAAAA,iBAAhB,WACG,gBAAK7B,UAAW6B,EAAAA,MAAhB,SAA0BQ,KAC1B,gBAAKrC,UAAW6B,EAAAA,UAAhB,SAA8BC,QAElC,SAAC,EAAD,MAGJ,C","sources":["webpack://my-app/./src/components/content/messages/dialog/Dialog.module.css?bacd","components/content/messages/dialog/Dialog.js","webpack://my-app/./src/components/content/messages/Messages.module.css?8c31","webpack://my-app/./src/components/content/messages/myMessage/myMessage.module.css?ba22","components/content/messages/myMessage/myMessage.js","webpack://my-app/./src/components/content/messages/usersMessage/usersMessage.module.css?493b","components/content/messages/usersMessage/usersMessage.js","components/content/messages/Messages.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"userName\":\"Dialog_userName__TpPLq\",\"userMessage\":\"Dialog_userMessage__RIAYG\"};","import React from 'react'\r\nimport di from './Dialog.module.css'\r\n\r\nconst Dialog = (props) => {\r\n  return (\r\n    <div className={di.dialog}>\r\n      <div className={di.userName}>{props.name}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Dialog\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageContainer\":\"Messages_messageContainer__-YMST\",\"users\":\"Messages_users__j3YDa\",\"title\":\"Messages_title__Ls-0D\",\"messagess\":\"Messages_messagess__TFA4j\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"myMessage_container__400cz\",\"name\":\"myMessage_name__OwzvV\",\"text\":\"myMessage_text__4xp0g\",\"click\":\"myMessage_click__831IB\",\"texts\":\"myMessage_texts__7N3P-\",\"error\":\"myMessage_error__2BlLX\"};","import { Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateNewPostActionCreator } from \"../../../../features/messages/messagesSlice\";\r\nimport my from \"./myMessage.module.css\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst MyMessage = () => {\r\n\tlet userName = useSelector((state) => state.messages.nameUsers);\r\n\r\n\treturn (\r\n\t\t<div className={my.myMessage}>\r\n\t\t\t<div className={my.container}>\r\n\t\t\t\t<div className={my.name}>{userName}</div>\r\n\t\t\t</div>\r\n\t\t\t<MyMessageForm />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst validationMyMessage = Yup.object().shape({\r\n\tmyMessage: Yup.string()\r\n\t\t.min(1, \"To short\")\r\n\t\t.max(50, \"The maximum number of characters\")\r\n\t\t.required(\"\"),\r\n});\r\n\r\nconst MyMessageForm = () => {\r\n     \r\n\tconst dispatch = useDispatch();\r\n\tconst newPostMessage = (myMessage) => {\r\n\t\tdispatch(updateNewPostActionCreator(myMessage));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{ myMessage: \"\" }}\r\n\t\t\t\tvalidationSchema={validationMyMessage}\r\n\t\t\t\tonSubmit={(values) => {\r\n\t\t\t\t\tnewPostMessage(values.myMessage);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{({ errors, touched }) => (\r\n\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\terrors.myMessage && touched.myMessage ? my.texts : undefined\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttype=\"textarea\"\r\n\t\t\t\t\t\t\tname=\"myMessage\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{errors.myMessage && touched.myMessage ? (\r\n\t\t\t\t\t\t\t<div className={my.error}> {errors.myMessage}</div>\r\n\t\t\t\t\t\t) : undefined}\r\n\t\t\t\t\t\t<button className={my.click} type=\"submit\">\r\n\t\t\t\t\t\t\tSend\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t)}\r\n\t\t\t</Formik>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MyMessage;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"userMessage\":\"usersMessage_userMessage__yJOpM\"};","import React from 'react'\r\nimport m from './usersMessage.module.css'\r\n\r\nconst UserMessage = (props) => {\r\n  return (\r\n    <div className={m.message}>\r\n      <div className={m.userMessage}>{props.message}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default UserMessage","import React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Dialog from './dialog/Dialog'\r\nimport m from './Messages.module.css'\r\nimport MyMessage from './myMessage/myMessage'\r\nimport UserMessage from './usersMessage/usersMessage'\r\n\r\nconst Messages = () => {\r\n   let users = useSelector(state=>state.messages.dialogsUser)\r\n   let messages = useSelector(state=>state.messages.dialogsMessages)\r\nconst isAuth=useSelector(state=>state.auth.isAuth)\r\n useEffect(()=>{\r\n\r\n })\r\n\r\n   let user = users.map(u=><Dialog key={u} name={u.name} id={u.id}/>)\r\n   let message = messages.map(u=><UserMessage key={u} message={u.message} id={u.id}/>)\r\n\r\n  return (\r\n    <div className={m.messages}>\r\n     <div className={m.title}>Messages</div>\r\n      <div className={m.messageContainer}>\r\n         <div className={m.users}>{user}</div>\r\n         <div className={m.messagess}>{message}</div>\r\n     </div>\r\n     <MyMessage/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Messages\r\n"],"names":["props","className","di","name","validationMyMessage","Yup","shape","myMessage","min","max","required","MyMessageForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","updateNewPostActionCreator","newPostMessage","errors","touched","my","undefined","type","userName","useSelector","state","messages","nameUsers","m","message","users","dialogsUser","dialogsMessages","auth","isAuth","useEffect","user","map","u","id"],"sourceRoot":""}